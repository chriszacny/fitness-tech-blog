NEW SITE TODO
================

Immediate TODO:
- Actually figure out site name
- Write a few posts (See ideas in Trello)
- Implement RSS - confirm above posts work
- Category and tag links should
- Start thinking about WSGI and WebServers:
-- https://docs.python.org/2/howto/webservers.html
-- https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface
--- Will these efficiently run my Python process in parallel such that each request can
    calculate data to return on the fly, or should I use some sort of cache like Redis?
- Pick out provider - Heroku, Github (?), Google (?), AWS (?)
-- Consider - run it in a Docker container
- Set up Ansible automation for WebServer and Deployment
- Set up CI process and GUI for above automation
-- Dev Env
-- Prod Env
- Push to whatever prod env I choose - site should display on the internet

After Initial Deploy TODO:
- Implement Category, Tag, Date Filtering
- Implement Archives Page


Site Behavior
------------------
/index, /blog, etc
* Latest 3 posts loaded.
* User click on post title - Takes you to just that post
* Paging always displayed, goes by 3 posts when clicked
*

/blog/post-title
* Displays only that blog post
* Paging always displayed, goes by 3 posts when clicked
*


Site Buildout
------------------
--- Flask Site Buildout
---- Lay out routes
----- /archives - archives page
------ page
------ method

------ Display 3 posts with prev and next links
---- On startup / deploy / (add .md page),
---- Generate site_data.json
---- load site_data.json into memory. This will contain KVPs of categories, tags, dates : articles and such

--- Pagination
---- Three posts per query / page. Just use '<< previous' and 'next >>' as necessary.
---- Order posts by date, most recent at top

----
--- Archives
---- Need to see how others do the large, medium, small text tags. I'm thinking 3-5 css classes placed on spans in the <p>.
----- If I do this in flask, in theory, when I build / deploy the site, I could create a site_data.json file that has categories and tags (with counts) aggregated across articles.
--- Older Posts (Display when more than 3 posts remaining in post timeline history. On click, load up the next 3 pages). Users use back button to go back.
--- Favicon - get this working.
--- RSS Feed  - need to generate like I do now on chriszacny.com


--- need to lay out jinja templates
---- OR consider just doing this as a Flask webserver again.


Future Enhancements:
----- /blog/tags/tag_name
----- /blog/categories/category_name
------ Display 3 posts with prev and next links

Deployment Managment
------------------
-- Create a build script of sorts that takes current Git content, generates appropriate files, and deploys to my dreamhost server. Need to restart the passenger.py processs to pic up new site_data.json. (Fabric?)


- Build pelican theme using foundation layouts.
-- Lay out (all assets) in HTML using HTML 5 best practices / tags
---- which tag to use: http://html5doctor.com/downloads/h5d-sectioning-flowchart.png
---- http://html5doctor.com/avoiding-common-html5-mistakes/


Misc Notes
------------------
-- Three themes in play here:
--- Foundation - layout / typography
--- Penscratch - look and feel ???
--- Pelican (Smashing) - ???
-- Read this: https://emptysqua.re/blog/write-an-excellent-programming-blog/
